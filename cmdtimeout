#!/bin/bash
#
# Based on
# http://www.bashcookbook.com/bashinfo/source/bash-4.0/examples/scripts/timeout3
# with modifications from
# http://stackoverflow.com/questions/5719030/bash-silently-kill-background-function-process
#
# The Bash shell script executes a command with a time-out.
# Upon time-out expiration SIGTERM (15) is sent to the process. If the signal
# is blocked, then the subsequent SIGKILL (9) terminates it.
#
# Based on the Bash documentation example.
#
# Hello Chet,
# please find attached a "little easier"  :-)  to comprehend
# time-out example.  If you find it suitable, feel free to include
# anywhere: the very same logic as in the original examples/scripts, a
# little more transparent implementation to my taste.
#
# Dmitry V Golovashkin <Dmitry.Golovashkin@sas.com>

scriptName="${0##*/}"

declare -i DEFAULT_TIMEOUT=9

# Timeout.
declare -i timeout=DEFAULT_TIMEOUT
# Interval between checks if the process is still alive.
declare -i interval=1

function printUsage() {
    cat <<EOF

Synopsis
    $scriptName [-t timeout] command
    Execute a command with a time-out.
    Upon time-out expiration SIGKILL (9) is sent to the process.

    -t timeout
        Number of seconds to wait for command completion.
        Default value: $DEFAULT_TIMEOUT seconds.

As of today, Bash does not support floating point arithmetic (sleep does),
therefore all time values must be integers.
EOF
}

# Options.
while getopts ":t:i:" option; do
    case "$option" in
        t) timeout=$OPTARG ;;
        *) printUsage; exit 1 ;;
    esac
done
shift $((OPTIND - 1))

# $# should be at least 1 (the command to execute), however it may be strictly
# greater than 1 if the command itself has options.
if (($# == 0 || interval <= 0)); then
    printUsage
    exit 1
fi

exec "$@" &
pid=$!

((t = timeout))

while ((t > 0)); do
    sleep $interval
    # kill -0 exit code indicates if a signal may be sent to $pid process.
    kill -0 $pid 2>/dev/null || exit 0
    ((t -= interval))
done

kill -s SIGKILL $pid
wait $pid 2>/dev/null
